defmodule ParserTest do
  use ExUnit.Case

  test "Parse a blockchain block" do
    bootstrap_start_snippet = <<0xf9,0xbe,0xb4,0xd9,0x1d,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0xa3,0xed,0xfd,0x7a,0x7b,0x12,0xb2,0x7a,0xc7,0x2c,0x3e,0x67,0x76,0x8f,0x61,0x7f,0xc8,0x1b,0xc3,0x88,0x8a,0x51,0x32,0x3a,0x9f,0xb8,0xaa,0x4b,0x1e,0x5e,0x4a,0x29,0xab,0x5f,0x49,0xff,0xff,0x00,0x1d,0x1d,0xac,0x2b,0x7c,0x01,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x4d,0x04,0xff,0xff,0x00,0x1d,0x01,0x04,0x45,0x54,0x68,0x65,0x20,0x54,0x69,0x6d,0x65,0x73,0x20,0x30,0x33,0x2f,0x4a,0x61,0x6e,0x2f,0x32,0x30,0x30,0x39,0x20,0x43,0x68,0x61,0x6e,0x63,0x65,0x6c,0x6c,0x6f,0x72,0x20,0x6f,0x6e,0x20,0x62,0x72,0x69,0x6e,0x6b,0x20,0x6f,0x66,0x20,0x73,0x65,0x63,0x6f,0x6e,0x64,0x20,0x62,0x61,0x69,0x6c,0x6f,0x75,0x74,0x20,0x66,0x6f,0x72,0x20,0x62,0x61,0x6e,0x6b,0x73,0xff,0xff,0xff,0xff,0x01,0x00,0xf2,0x05,0x2a,0x01,0x00,0x00,0x00,0x43,0x41,0x04,0x67,0x8a,0xfd,0xb0,0xfe,0x55,0x48,0x27,0x19,0x67,0xf1,0xa6,0x71,0x30,0xb7,0x10,0x5c,0xd6,0xa8,0x28,0xe0,0x39,0x09,0xa6,0x79,0x62,0xe0,0xea,0x1f,0x61,0xde,0xb6,0x49,0xf6,0xbc,0x3f,0x4c,0xef,0x38,0xc4,0xf3,0x55,0x04,0xe5,0x1e,0xc1,0x12,0xde,0x5c,0x38,0x4d,0xf7,0xba,0x0b,0x8d,0x57,0x8a,0x4c,0x70,0x2b,0x6b,0xf1,0x1d,0x5f,0xac,0x00,0x00,0x00,0x00,0xf9,0xbe,0xb4,0xd9,0xd7,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x6f,0xe2,0x8c,0x0a,0xb6,0xf1,0xb3,0x72,0xc1,0xa6,0xa2,0x46,0xae,0x63,0xf7,0x4f,0x93,0x1e,0x83,0x65,0xe1,0x5a,0x08,0x9c,0x68,0xd6,0x19,0x00,0x00,0x00,0x00,0x00,0x98,0x20,0x51,0xfd,0x1e,0x4b,0xa7,0x44,0xbb,0xbe,0x68,0x0e,0x1f,0xee,0x14,0x67,0x7b,0xa1,0xa3,0xc3,0x54,0x0b,0xf7,0xb1,0xcd,0xb6,0x06,0xe8,0x57,0x23,0x3e,0x0e,0x61,0xbc,0x66,0x49,0xff,0xff,0x00,0x1d,0x01,0xe3,0x62,0x99,0x01,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x07,0x04,0xff,0xff,0x00,0x1d,0x01,0x04,0xff,0xff,0xff,0xff,0x01,0x00,0xf2,0x05,0x2a,0x01,0x00,0x00,0x00,0x43,0x41,0x04,0x96,0xb5,0x38,0xe8,0x53,0x51,0x9c,0x72,0x6a,0x2c,0x91,0xe6,0x1e,0xc1,0x16,0x00,0xae,0x13,0x90,0x81,0x3a,0x62,0x7c,0x66,0xfb,0x8b,0xe7,0x94,0x7b,0xe6,0x3c,0x52,0xda,0x75,0x89,0x37,0x95,0x15,0xd4,0xe0,0xa6,0x04,0xf8,0x14,0x17,0x81,0xe6,0x22,0x94,0x72,0x11,0x66,0xbf,0x62,0x1e,0x73,0xa8,0x2c,0xbf,0x23,0x42,0xc8,0x58,0xee,0xac,0x00,0x00,0x00,0x00,0xf9,0xbe,0xb4,0xd9,0xd7,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x48,0x60,0xeb,0x18,0xbf,0x1b,0x16,0x20,0xe3,0x7e,0x94,0x90,0xfc,0x8a,0x42,0x75,0x14,0x41,0x6f,0xd7,0x51,0x59,0xab,0x86,0x68,0x8e,0x9a,0x83,0x00,0x00,0x00,0x00,0xd5,0xfd,0xcc,0x54,0x1e,0x25,0xde,0x1c,0x7a,0x5a,0xdd,0xed,0xf2,0x48,0x58,0xb8,0xbb,0x66,0x5c,0x9f,0x36,0xef,0x74,0x4e,0xe4,0x2c,0x31,0x60,0x22,0xc9,0x0f,0x9b,0xb0,0xbc,0x66,0x49,0xff,0xff,0x00,0x1d,0x08,0xd2,0xbd,0x61,0x01,0x01,0x00>>

    {:ok, block, _rest} = Parser.parse_block(bootstrap_start_snippet)

    assert block.magic == <<0xf9, 0xbe, 0xb4, 0xd9>>
    assert block.size == 0x11d
    assert block.tx_counter == 1
  end

  test "Parse a blockchain header" do
    raw_header = <<0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0xa3,0xed,0xfd,0x7a,0x7b,0x12,0xb2,0x7a,0xc7,0x2c,0x3e,0x67,0x76,0x8f,0x61,0x7f,0xc8,0x1b,0xc3,0x88,0x8a,0x51,0x32,0x3a,0x9f,0xb8,0xaa,0x4b,0x1e,0x5e,0x4a,0x29,0xab,0x5f,0x49,0xff,0xff,0x00,0x1d,0x1d,0xac,0x2b,0x7c>>

    {:ok, header, _rest} = Parser.parse_block_header(raw_header)

    assert header.version == 1
    assert header.hash_prev_block == <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    assert header.hash_merkle_root == <<0x3b, 0xa3,0xed,0xfd,0x7a,0x7b,0x12,0xb2,0x7a,0xc7,0x2c,0x3e,0x67,0x76,0x8f,0x61,0x7f,0xc8,0x1b,0xc3,0x88,0x8a,0x51,0x32,0x3a,0x9f,0xb8,0xaa,0x4b,0x1e,0x5e,0x4a>>
  end

  test "Parse varint" do
    # uint8
    assert Parser.parse_varint(<<0x00>>) == {0, <<>>}
    assert Parser.parse_varint(<<0xfc>>) == {0xfc, <<>>}
    assert Parser.parse_varint(<<0xfc, 0xaa>>) == {0xfc, <<0xaa>>}

    # uint16
    assert Parser.parse_varint(<<0xfd, 0x00, 0x00>>) == {0, <<>>}
    assert Parser.parse_varint(<<0xfd, 0xffff :: size(16)>>) == {0xffff, <<>>}
    assert Parser.parse_varint(<<0xfd, 0xffff :: size(16), 0xaa>>) == {0xffff, <<0xaa>>}

    # uint32
    assert Parser.parse_varint(<<0xfe, 0x00000000 :: size(32)>>) == {0, <<>>}
    assert Parser.parse_varint(<<0xfe, 0xffffffff :: size(32)>>) == {0xffffffff, <<>>}
    assert Parser.parse_varint(<<0xfe, 0xffffffff :: size(32), 0xaa>>) == {0xffffffff, <<0xaa>>}

    # uint64
    assert Parser.parse_varint(<<0xff, 0x0000000000000000 :: size(64)>>) == {0, <<>>}
    assert Parser.parse_varint(<<0xff, 0xffffffffffffffff :: size(64)>>) == {0xffffffffffffffff, <<>>}
    assert Parser.parse_varint(<<0xff, 0xffffffffffffffff :: size(64), 0xaa>>) == {0xffffffffffffffff, <<0xaa>>}
  end
end
